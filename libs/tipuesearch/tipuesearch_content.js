var tipuesearch = {"pages": [{"title":"no title","text":"","tags":"","url":"code.html"},
{"title":"Data Science","text":"Data Science Data Science at Brown DGS Information Learning objectives Data Science on the Web Data Science Central Visualizing machine learning one concept at a time Datasets Google Dataset Search KD Nuggets. Pointers to lots of other resources UC Irvine Machine Learning repository Kaggle. Machine learning contests. Articles Difference between stats and data science Layman’s guide to data science topics (lots of links) Discriminative vs. Generative classifiers by Andrew Ng and Michael Jordan. Learning Resources","tags":"","url":"datascience.html"},
{"title":"Dinner rotation","text":"Dinner rotation","tags":"","url":"dinner.html"},
{"title":"no title","text":"X1 node X node 1 node 2 node 3 node 4 node X node 1 node 2 node 3 node 4 node X node 1 node 2 node 3 node 4 node X node 1 node 2 node 3 node 4 node X2 node X node 1 2 3 4 X node 1 node 2 node 3 node 4 node X node 1 node 2 node 3 node 4 node X node 1 node 2 node 3 node 4 node","tags":"","url":"foo.html"},
{"title":"Salads","text":"Salads Smoothies Dinners Snacks Restaurants","tags":"","url":"food.html"},
{"title":"CTK Frisbee","text":"CTK Frisbee Link ctk-frisbee Google Group: tinyurl.com/ctkfrisbee Routine Copy the latest table in the CTK Frisbee AirTable base and change the date on the title and in the form view. Copy the share link and update the Google Group welcome message with the fresh link. Compose a message for the group with the RSVP link. Dear team, If you want to indicate your availability for ultimate frisbee on Sunday afternoon at 1:30 in Cambridge Common, you can do that quickly here. Looking forward to it! Best, Sam On Sunday morning, pack: Disks Cones Sunblock Water","tags":"","url":"frisbee.html"},
{"title":"GitHub","text":"GitHub Education Elijah Ishikawa Chambers API Web Client Content creation Data Gymnasia (powered by Mathigon) mathigon-textbooks (scratch) manim (powered by 3Blue1Brown) MultivariableCalculus.tex Binder repos Introduction to deep learning PySpark Miscellaneous IntroLinearAlgebra.jl Cheatsheets Editing Public LaTeX config Private LaTeX config Graphics AsyPlots.jl Conformal Probability ConformalMaps.jl VertexModels.jl WoodedTriangulations.jl Dimers.jl GaussianFreeFields Utilities yagmail","tags":"","url":"github.html"},
{"title":"Home","text":"Home I am from Oxford, Mississippi, where I lived until I was 16 and then again from 18 to 23 when I attended the University of Mississippi. My last two years of high school were at the Mississippi School for Mathematics and Science. I lived for one year in Cambridge, UK before moving to the Boston area to start graduate school in 2010. I have lived in Somerville, Roslindale, and Arlington for 3 years, 3 years, and 2+ years, respectively. My parents met working for the airlines at the Memphis airport, but my father’s true passion is tomato farming. I planted, picked, and hoed with him from the time I was very young. When I was in 7th grade, my math teacher Mrs. Ann Womble got me interested in math contests, and I participated in and coached Mathcounts from 7th grade through college. I met Nora Hughes at Sonya Kovalevsky Day at Mississippi State University when I was 17 years old, and we were married in 2007 at ages 20 and 21. After completing my PhD in mathematics at in January 2015, I began working at Brown University as a math postdoc. In my last year I transitioned from that job to a position directing the graduate program in the Data Science Initiative. Since 2010 we have attended Christ the King Presbyterian Church in Central Square, where Nora sings on Sundays and where I run the sound board and coordinate the frisbee meetups in the summers. In addition to ultimate frisbee, I enjoy playing basketball, racquetball, and disc golf.","tags":"","url":"index.html"},
{"title":"Math Resources","text":"Math Resources Math Education Art of Problem Solving. Rich and problem-solving-oriented curriculum from for interested math learners 3Blue1Brown. Movie-quality animated math videos, with a taste for good mathematical thinking Imaginary. A non-profit out of Berlin that makes interactive math games, galleries, etc. Bootstrap. A curricular moddule for ninth grade math which introduces math concepts in the context of an extended video game design exercise (Shriram and Kathi in Brown CS are involved in the leadership). Math Books Some of my favorite math books: Concrete Mathematics, by Graham, Knuth, and Patashnik. Visual Complex Analysis, by Tristan Needham. Linear Algebra Done Right, by Sheldon Axler. Visual Group Theory, by Nathan Carter. Introduction to Smooth Manifolds, by John M. Lee.","tags":"","url":"math.html"},
{"title":"Personal life","text":"Personal life Contents Food Exercise Music Transit Routines Reading Favorite blogs Favorite books Travel Favorite Boston spots Places visited Food We do a lot of salads and smoothies We have a short dinner rotation Our favorite snacks and restaurants Exercise I ride my bike regularly as a part of my commute I go on walks to Robbins Farm Park with Nora I go with Nora to SweatFixx in Arlington Center for row classes I have a set of Bowflex SelectTech dumbbells and an exercise mat in my bedroom Music I learned to play guitar as a teenager and have maintained a small repertoire I learned a few songs on the piano in high school Transit I get to work using a variety of mechanized conveyances I use a Sesame Ring for train and bus access I have a Blue Bikes membership for bike sharing in Boston I take Amtrak and MBTA commuter rail trains from South Station or Back Bay to Providence We have a Zipcar membership, which can be helpful for inexpensive trips to the airport Routines I have various systems in place to improve organization and discipline. Morning routine Evening routine Work routine Reading Favorite blogs Slate Star Codex. A wide variety of topics from a rationalist point of view. Scott Alexander is impressively generous and intellectually honest What’s new Perhaps the world’s foremost mathematician and prolific blogger Shtetl-Optimized. Theoretical computer scientist at UT Austin, also has a compelling take a wide variety of interests Fredrik deBoer. An education blog written from the point of view of a socialist rationalist colah. Deep learning Favorite books New York Times Guide to Essential Knowledge. A compendium of general knowledge. Great for reaching a skeletal understanding of a variety of basic topics. Thinking, Fast and Slow, by Daniel Kahneman. An eye-opening exploration of the relationship between conscious and subconscious thinking. Substantial implications for how to approach habit formation and learning. Creativity, Inc., by Ed Catmull. A discussion of management and business success from a co-founded of Pixar Flash Boys, by Michael Lewis. A riveting tale of high-frequency trading on Wall Street. Better Angels of our Nature, by Steven Pinker. An argument that modernity is leading to better outcomes in all the most important metrics, including personal safety. Deep Work, by Cal Newport. A plea to re-structure modern life around the importance of long periods of distraction-free, thoughtful work. Alexander Hamilton, by Ron Chernow. A well-told and detailed account of the life of the founding father Alexander Hamilton. The Signal and the Noise, by Nate Silver. An analysis of the distinction between good predictions and bad ones. Travel Favorite Boston spots Robbins Farm Park. Short walk from our Arlington home, excellent view of the city. Minuteman Bikeway. Bike path that runs from Alewife station up to Bedford, passing near our house. Arnold Arboretum. Harvard-owned tree and plant museum; beautiful and large. Top of the Hub. Restaurant at the top of the Prudential Center, spectacular view of the city. Mass Audobon Habitat. Park with walking trails; fairly close to our Arlington home. Places visited Oxford, Mississippi. Born and raised. Memphis, Tennessee. My parents met at work at the Memphis airport, and I visited often when I lived in Oxford. Birmingham, Alabama. My mother’s family is from Birmingham, and we visited several times a year throughout my childhood Tuscaloosa, Alabama. Aunt Babs and Uncle Robert live there, as well as my cousin Robby and his wife Jen. Starkville, Mississippi. Where Nora’s family lives. We go there every Christmas unless her family is traveling. Iowa City, Iowa. The Central Region location for ARML when I was in high school. I took a bus there with some Memphis-area high schoolers several summers in high school. Auburn, Alabama. Attended a one-week Mises Institute program at the behest of my grandfather, in high school. Atlanta, Georgia. Six Flags trip in high school. Washington, DC. I traveled there with my mother, my sister-in-law Kathie, and her two kids Lee and Meg when I was 9. I visited again with Nora during the 2018 February vacation. Cambridge, UK. Lived in 2009–2010 while attending the University of Cambridge, and visited again for three weeks in January 2015 for a math conference. Paris, France. Stayed here for several days on Nora’s birthday trip in 2010. Avignon, France. Our first stop in the South of France in 2010. Nimes, France. An excursion from Avignon. Carcassone, France. A stopover on the way from Avignon to Bordeaux. Bordeaux, France. We stayed here with a local resident that Nora had met on an airplane when she flew back to the US for her grandfather’s funeral. We got to chat with her friends and visit a basement meeting of her sizable jazz group. Edinburgh, Switzerland. We flew up for a weekend with Nora’s sister Lauren and her friend Megan Gammill while we lived in Cambridge. Munich, Germany. Stayed for several days with Mary Kate and Nora at the summer residence of Jon and Chrissy while Jon did an internship at Google. Prague, Czechia. Attended math conference in 2011. Vienna, Austria. Bus excursion from Prague to visit Matthew where he lived in 2011. Rome, Italy Flew from Cambridge with Jesse Switzer, Cameron Byrum, Nora’s sister Mary Kate and Nora (2010). Zurich, Switerland. My first journey overseas, I went there on a physics field trip when I was a senior at MSMS. Les Diablerets, Switzerland. A ski resort where I attended a mathematical physics conference in 2013, 2014, and 2015. Wengen, Switzerland. Another ski resort, the one we visited on the MSMS physics trip. Geneva, Switzerland. Part of the physics trip and some of the Diablerets trips. Stuttgart, Germany. A half-day excursion on the physics trip. Helsinki, Finland. Attended a math conference in 2012. St. Petersburg, Russia. Attended a 2-week summer school in 2012. Moscow, Russia. Took an overnight train for a brief stay between the St. Petersburg summer school and the Berlin research visit. Berlin, Germany. Three-week research visit to see Wendelin Werner and Hao Wu in 2012. San Francisco, CA. Attended a math conference in Berkeley in 2012, a physics conference in 2005, and visited Luke and Morgan in 2017. Pheonix, AZ. Flew into Phoenix when visiting my high school friend Matthew Huber and his wife Liza in 2016. Grand Canyon, AZ. Matthew, Liza, and I visited the canyon for a few days on our 2016 trip. Knoxville, Tennessee. Attended the wedding of Sam Beswick and Steffi Sunny in 2018. Portland, Maine. Several trips with Greg Minton and other MIT friends during grad school, as well as a stopover visit on the way to Acadia in 2017. Bar Harbor, Maine. Road trip with Nora in 2017. Spectular views and hiking. Newport, Rhode Island. Several visits with family sprinkled across our years living in Boston. Beautiful historic homes, pretty touristy. Bristol, Rhode Island. Rode bikes here in April 2016 with Anna and Kogos. Terminus of the East Bay Bike Path. Lenox, Massachusetts. Nora’s Tanglewood programs, every summer since we’ve moved to Boston. North Adams, Massachusetts. Day trip in 2017 to the Museum of Contemporary Art, and an overnight stay in 2015. Pittsfield, Massachusetts. The station nearest Lenox where the Amtrak stops. Burlington, Vermont. A feature of a couple road trips, including one in 2017. Ogunquit, Maine. Excellent summer beach spot not too far from Boston. Rockport, Massachusetts. Quant coastal town nearby. Salem, Massachusetts. Where Anna and Kogos live; we visited here in 2010 with Walker and again in 2017 to see Anna and Kogos. Also drove here in a Zipvan with Sam Beswick to help him pick up sofa. New York, New York. Went along with Nora in college on the trip she won with the Honors College, and visited Olivia there a couple times in subsequent years. Also visited Peter and Anna there with Greg, a year or so after they moved from Boston. Philadelphia, Pennsylvania. Where Nora had her Teach for America training in 2011; I visited her there once during this period. Durham, North Carolina. I visited Duke University twice while in college, as a part of scoping out potential graduate schools. Charlottesville, Virginia. A stop on a trip to Virginia with Andrew Medore, Nora, and my mother. San Diego, California. Nora and I flew out to San Diego to visit Greg while he lived there after graduate school. Dallas, Texas. Cotton Bown 2009, with a dozen or so friends from Ole Miss. Austin, Texas. My engagement celebration with Michelle, my first fiancee. San Antonio, Texas. An excursion from Austin. Heber Springs, Arkansas. George Richardson’s family’s lakehouse; visited with Natalie and Nora and George. New Orleans, Louisiana. An Ole Miss Quarterback Club trip to an Ole Miss game against Tulane in 1997 with Dad, then another Ole Miss game in January 2016, followed soon after by a trip with my grandfather and his girlfriend Ruth in February 2016 (for the wedding of my cousin Robby). Miami, Florida. Visit Sarah King with Greg and Nora soon after she left Boston for med school in 2013. Orlando, Florida. Visited several times, including the 2009 Mathcounts National Competition. Melbourne Beach, Florida. Nora’s grandmother’s home, visited several times over the years. Storrs, Connecticut. Gave a math talk at the UConn in 2015. Chicago, Illinois. Gave a math talk in February 2018, and also attended the Mathcounts National Competition when I was in 10th grade. Seattle, Washington. Lived here for Summer 2013 and four weeks in 2011 while working at Microsoft Research. Vancouver, British Columbia. Made an excursion from Seattle to visit Philippe Charmoy in 2013. Anchorage, Alaska. Weekend trip to visit Gabriel Florit and Anna Josephson from Seattle in 2011. San Jose, Costa Rica. 30th birthday trip in January 2016, with Nora . Calvert City, Kentucky. Several stays with my brother Lee and his wife Kathy. Nashville. A college visit to Vanderbilt and a couple Boston-to-Nashville-plus-drive itineraries to Starkville. Chattanooga, Tennessee. Stayed in the Chattanooga choo-choo as a child with my mother and her friend Sarah. Columbus, Mississippi. Where I attended high school. Destin, Florida. Vacation with Ole Miss friends in 2009. Jackson, Mississippi. Several field trips as a child, including every state Mathcounts contest. Tahoe City, California. Honeymoon in 2007. London, United Kingdom. Lots and lots and lots of trips from Cambridge in 2010–2011. Isle of Wight, United Kingdom. Yacht trip with Tom and Julie and Nora in 2010. Salisbury, United Kingdom. Stay with Tom Woolford’s family over New Year’s 2010. Lancaster, United Kingdom. Stay with Julie Woolford’s family over Christmas, 2009.","tags":"","url":"personal.html"},
{"title":"Routines","text":"Routines Morning Evening Work","tags":"","url":"routines.html"},
{"title":"SamBot","text":"SamBot Triggering criteria: choose from the matching Socratic hockets according to the maximum number of criteria (random choice for tiebreaking).","tags":"","url":"sambot.html"},
{"title":"Productivity","text":"Productivity Google Inbox. Handling email and reminders in the same place; take advantage of snoozing. Asana. Project management software for organizing larger scale projects into tasks Trello. Similar to Asana, used for projects where per-board permissions control is required. Habitica. Recording success with daily habits Day One. Daily journaling BeFocused Pro. Pomodoro system (breaking up work into 25-minute intervals) Taco. Service for compiling to-do items from Google Inbox, Asana, and Trello into a single place aTimeLogger 2. Time tracking Airtable. Database with a polished user interface, for storing receipts, inventory for renter’s insurance, grocery data, etc. Dropbox. File syncing Paprika. Recipe manager TablePlus. GUI for SQLite and other SQL programs zoom.us. Screen-share remote meetings Fluid. Make any web app into a native app Leisure Pocket. App and browser extension for compiling articles for later reading. Integrates with Kobo reader. Spotify. Subscription service for music Audible. Audiobooks Quora. Social media in Q&A format Hardware MacBook Pro. iPad Pro 9.7. iPhone 8+. Kobo Aura One. Ereader Languages Julia. Scientific computing, fast and elegant Python. Packages for everything, and most popular data science language LaTeX. Technical typesetting Asymptote. Beautiful 2D and 3D graphics with TeX labels Racket. An offshoot of Scheme, a language designed for making languages Pyret. An instructional language developed at Brown, runs in-browser and has helpful error messages and other pedagogical assets Sage. Unified Python-based framework for open source math software SQLite. Local databases Web I use Racket Frog to build websites. The source content is stored in ~/Dropbox/Sites/. Currently there are two sites: brown for my public site and private for my personal wiki (this website). The sites are synced to their respective hosts: the math department and Amazon Web Services. The procedure is: Make appropriate changes to the Markdown files in _src Build the site and preview it with raco frog -bp Push the changes to the server with siteup (for the public site) or push (for the private one). These aliases are defined in ~/.bashrc.","tags":"","url":"technologies.html"},
{"title":"no title","text":"List item. Nested list item. Code block. Code block second paragraph.","tags":"","url":"test.html"},
{"title":"DSI Master’s Applications","text":"DSI Master’s Applications Categories There are several supported DSI Master’s student categories. General. Applicants from outside Brown. Fifth-year master’s. Applicants who are seniors at time of application. They can carry over up to two credits from their undergrad. Open Grad. PhD students who are approved by the Graduate School for an additional year of study so they can pursue the full DSI Master’s degree. Doctoral Certificate. PhD Students who take DATA 1010, DATA 2020, and DATA 2080 on the side to get a certificate. Instructions available here. The PhD students (Open Grad and Doctoral Certificate) do not bring in any tuition revenue for the Initiative. Application process The applications for general and fifth-year applications are managed through CollegeNET. For Open Grad applicants, the process is that each applicant approaches you for a recommendation letter (which is a form from the Graduate School) and then then Graduate School emails you to say whom you got.","tags":"","url":"dgs/applications.html"},
{"title":"DGS Information","text":"DGS Information Contents Travel Master’s Program Job responsibilities Recurrent tasks Technologies Brown University Org Chart 2017–2018 DGS Accomplishments Highlights Detailed Travel StatFest Master’s Program Program website Applications and types of master’s students Summer communication with matriculating students Job responsibilities My responsibilities as a DSI Lecturer include: Teaching: Develop and teach the equivalent of two 1-credit courses Serve as Director of Graduate Studies for the DSI Masters Program: Advise Masters students Serve as primary contact for all Masters students Keep students informed about their academic standing and expected progress Liaise with Graduate School on program requirements Manage the DSI Masters Program: Conduct admissions process (from advertising to decisions) Develop and update advertisement and advising materials (e.g. website, handouts) Liaise with course instructors on policies and workload balance Collect student feedback for courses and program Oversee capstone process and approve all capstone proposals by Master’s students Recurrent tasks Enter courses for the following year into Banner by contacting the appropriate departmental administrators with information about the desired time and instructor(s). Be sure that the courses are listed as override-only. Doreen in the math department does this every January for the following academic year. Technologies CollegeNET is the system the Graduate School uses to manage admissions. Contact Ethan Bernstein to gain access. This software is quite full-featured but too slow to use exclusively. You can pull down the data of interest in a spreadsheet and download the associated PDF files in batch. You can leave these anywhere on your machine and pull them up rapidly with your operating system’s file name search. GSIM is a component of Banner which displays information about current graduate students. The Graduate School can also help you get GSIM. There isn’t much information available here, but you can get a student list and monitor grades. Brown University Org Chart It isn’t always obvious whom to reach out to when solving problems that involving bureaucracy. Here are some pointers. Brown Graduate School. Master’s Education Dean (Shayna Kessel). My first point of contact whenever I don’t know who else to ask; she’s great at cutting through nonsense and dispatching requests. Appreciates being consulted on issues; doesn’t feel pestered. Admission Coordinator (Marie Carreiro). For simple questions about CollegeNET and questions about communications with the applicants. Contact Maria Faria if Marie is out. Director of Administration and Operations (Ethan Bernstein). Point person for a variety of things. Will often be looped in when you ask questions. Admission & Reporting Manager (Julie Kindschy). The resident CollegeNET expert. Really great; can solve a lot of CollegeNET problems, including automating mundane tasks. Senior Financial Analyst (Kelly Scott). Can be useful to contact her directly about financial concerns, because she gives accurate and detailed information. CareerLAB CareerLAB Advisor (Bev Ehrich). Contact to help coordinate resume critiques and other career building exercises. Registrar University Registrar (Rob Fitzgerald). Usually won’t contact him directly, but he will often weigh in on important issues around student registration, tuition charges, full-time status, etc. Assistant Registrar (Karey Majka). This is the person to reach out to first about Registrar questions. She’s really excellent at understanding what you need and giving thorough and reliable replies. 2017–2018 DGS Accomplishments Highlights Provide extensive instructional support in data science master’s course Handle application process for 2018–2019 cohort Coordinate with SPS and assemble team to develop BrownX data science courses Develop resources and a correspondence framework for supporting the summer preparation of incoming students Support ITG’s deployment of new instructional technologies through piloting and consultation Detailed Provide instructional support in DATA 1010 (the fall semester mathematical statistics course) Discuss the student preparation gap with the course instructor and strategize about how to remediate Compile resources for filling in background material and communicate them to the students Start a lab component of the course to support interactive-computing learning modes Develop supplementary presentations of the material for students who found the learning curve for the course lecture notes too steep Provide summary concepts lists to emphasize the most important ideas in each section Write supplementary practice problems for homework assignments and exams Provide extensive supplementary office hours and evening review sessions Collaborate with course instructor on exam writing to ensure clarity and accuracy Handle application process for 2018–2019 cohort Respond to inquiries from prospective applicants Update application FAQ section on website Develop system for processing applications efficiently and fairly Read applications Work with university officials to secure accommodations for students who have financial or disability reasons to complete program on a different timeframe Hold meetings with admitted applicants to discuss the advantages of Brown’s program Coordinate with SPS and assemble team to develop BrownX data science courses Hold several meetings with Karen Sibley and Eve Formisano at the School of Professional Services to discuss a BrownX collaboration for the DSI’s DATA 1010 course Recruit a graduate student and an undergraduate student to assist with summer course development for the BrownX course Begin working with an SPS content specialist to develop the course Develop resources and a correspondence framework for supporting the summer preparation of incoming students Work with Initiative leadership to identify the need for further advance preparation for incoming students, and develop a plan for supporting the students’ preparation Inspect the available data science learning resources and compile an annotated list of suggestions Communicate with the students about the available resources and the importance of being ready to begin the program Develop system for soliciting reports from students about their progress throughout the summer Provide suggestions to each student based on their preparation in prerequisite areas Support ITG’s deployment of new instructional technologies through piloting and consultation Run MATH 0350 using iClicker Cloud, WeBWorK, and Gradescope Help convince ITG to support a local installation of WeBWorK, work with the ITG team to get it running Provide WeBWorK to help incoming DSI students with summer preparation Prepare to use instructional technologies for DSI courses in the fall Run the student orientation Plan schedule Invite speakers Present information on expectations and resources Build internal student resource website Compile information from Computer Science IT about using compute resources Compile information from CareerLAB Organize course information Provide list of mailing lists around campus that students might want to sign up for Write DSI student handbook Career services Coordinate student resume critique with CareerLAB Communicate with students about specific CareerLAB services Advertise job opportunities Intermediate between university and students Ensure student compliance with Title IX and academic code training Field and address students’ concerns about courses and administrative matters Have conversations with students when behavioral and academic expectations are unmet Help resolve confusion over whether summer tuition would be charged Negotiate academic space concerns Correspond with OISSS about international student issues, and write letters in support of international students’ OPT and CPT visa applications","tags":"","url":"dgs/index.html"},
{"title":"Brown Master’s in Data Science","text":"Brown Master’s in Data Science Learning Objectives Mathematical Statistics Linear Algebra Review Dimension Span Linear independence Geometric perspective on determinant Singular value decomposition Numerical Computation Integer and floating point representations Machine precision Overflow and underflow Matrix condition number Optimization (gradient descent) Probability Preliminary material Sample space/events Conditional probability Bayes’ rule Discrete random variables Common distributions Binomial Poisson Expected value and variance Linearity of expectation Markov’s inequality and Chebyshev’s inequality Moment generating functions Continuous random variables Common distributions Exponential distribution Normal distribution Covariance and correlation Modes of random variable convergence Law of large numbers Central limit theorem Multivariate distributions Joint/marginal/conditional densities Independence Gaussian Statistics Estimation Mean squared error Bias variance tradeoff Method of moments Maximum likelihood Confidence intervals Density Estimation Empirical CDF Histograms Kernel density estimation Bootstrap Hypothesis testing difference in means/variance 1-sided vs 2-sided tests likelihood ratio Random permutation tests Machine Learning Classification Optimal classification Confusion matrix Bayes classification rule Neyman-Pearson lemma Receiving operating characteristic Classification models Generative models Naive Bayes Linear discriminant analysis Quadratic discriminant analysis Discriminative models Support vector machines Logistic regression Nearest neighbors Applied Statistics Topics Exploratory Statistics and Data Visualization Missing data Regression Transformations, interactions, and nonlinearity Model diagnostics Cross validation Model inference and interpretation, confidence in prediction Model comparison, hypothesis testing Use of simulation Dimensionality reduction Multilevel data structures Causal Inference Tools Programming in R using RStudio R Markdown for the creation of presentations Basic LaTeX Computer Science Topics Introductory Topics Test First Design Algorithms Recursion as a design principle (divide and conquer) Understanding Complexity in Time Understanding Complexity in Space Trade-offs Algorithmic complexity (http://bigocheatsheet.com/) Types References versus values Creating New Types Abstract Data Types Classes, OO design Encapsulation Interfaces Persistence Memoization Indexes Hashes Intermediate Topics Large Scale Computation Underflow, Overflow Threads, Cores Memory Mapping Distributed Computing Data Science Topics Data cleaning Web scraping Databases Access Design Data collection File formats (raw/binary, text, csv, json, hdf, images) Search Engine Design Information Retrieval, NLP and Search Image Processing Interactive Web Application Creation Tools Unix file system ls ps kill top chgrp chmod grep sed jq (sed for json) pipes Version control (git) Pycharm or other Python IDE Scikit-learn Pandas Jupyter notebooks Cloud Computing Using AWS EC2 Google Cloud Platform Longitudinal objectives Data skills Data variety genomic data medical records image sequences log files Professional skills Writing and Emailing in English Google Drive (Docs and Sheets) Microsoft Word Microsoft Excel Presentation software (Powerpoint or Keynote) Presenting in English Presentation design Writing paper reports Writing online reports (blog posts) Accountability Punctuality","tags":"","url":"dgs/objectives.html"},
{"title":"Summer Preparation","text":"Summer Preparation We communicate with the incoming students to help them take maximum advantage of their summer in preparing for the fall program. Information made available to the students can be seen here. Behind the scenes, the individualized replies are managed using AirTable and an ad-hoc Python library for performing mail merge with AirTable. The process works as follows: Make an AirTable with columns for the data you want to collect, and make a form view (to which you can add instructions). Check that there are no blank records at the bottom of the table Check that the Email column is present and filled in Add an “Email Sent” checkbox column to the table, as well as reply columns for as many replies as you want to make. Make a subddirectory in Dropbox/DSI/Emailing/templates. This folder should contain checkboxField.txt, which contains a single line of text indicating which column to check when an email is successfully sent. template.html with a message in html form with substitution markers in the form ${REPLY} (here REPLY is a substitution token). subColumns.json with a dictionary mapping substitution tokens in template.html to the corresopnding AirTable column names. Examples: checkboxField.txt Email Sent template.html <p>Dear ${NAME},</p> <p>In the form you submitted, you said ${ORIGINAL}. ${REPLY}.</p> subColumns.json { NAME: Full Name, ORIGINAL: My Preparation, REPLY: Response } Fire up a Python 3 session, navigate to ~/Dropbox/DSI/Emailing, and run (replacing my-template with your directory name): from airtable import AirTable, SUMMERPLANS_URL, GRIDVIEW import mail as m airtable = AirTable(SUMMERPLANS_URL,GRIDVIEW) mailtemplate = m.MailTemplate(templates/my-template/) smtp = m.gmail_connection() m.sendEmails(smtp,mailtemplate,airtable,dryRun=True,divert=False) Note that you might have to go into your Google account settings and activate “allow less secure apps”. (accounts.google.com > Apps with account access > Allow less secure apps)","tags":"","url":"dgs/summer_communications.html"},
{"title":"no title","text":"Trying a simple example. This is bold 2","tags":"","url":"dgs/tmp.html"},
{"title":"no title","text":"The R package tikzDevice supports LaTeX output of R figures. I have some custom options set up in my ~/.Rprofile for that. Here’s a usage example: library(tikzDevice) library(tidyverse) tikz.open(foobar.tex,width=6,height=4) p = ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = cty)) + theme_watson() print(p) dev.off()","tags":"","url":"notes/R.html"},
{"title":"Air conditioners","text":"Air conditioners Tips for installing the air conditioners: They are stored in the basement next to the oil tank. The best way to seal the air conditioners in their windows is weatherseal tape. It’s way better than packing tape or duck tape, because (1) it lays down smoothly and therefore looks way better, and (2) it’s designed to be removed at the end of the season.","tags":"","url":"notes/airconditioners.html"},
{"title":"AirTable","text":"AirTable One significant problem with the AirTable API is that it doesn’t include column type information. This leads to difficulty passing information back to Airtable through the API (since numbers and bools have to be sent without enclosing quotes, and other data types require them). One hackish workaround is to go to airtable.com/api, navigate to the desired table, and run console.log(JSON.stringify(_.mapValues(application.tablesById, table => _.set( _.omit(table, ['sampleRows']), 'columns', _.map(table.columns, item => _.set(item, 'foreignTable', _.get(item, 'foreignTable.id'))) )))) in the browser console. This returns some JSON that you can copy-paste and parse. (This tip comes from here: https://github.com/Airtable/airtable.js/issues/12)","tags":"","url":"notes/airtable.html"},
{"title":"no title","text":"","tags":"","url":"notes/asana.html"},
{"title":"Atom","text":"Atom Packages tablr is a csv editor. Install using apm install https://github.com/mfripp/atom-tablr.git, because there’s a bug in the version accessible through the package installer. uber-juno installs the Julia IDE hydrogen provides support for Jupyter-style interaction (using the Jupyter protocol) language-r and language-python for syntax highlight and snippets minimap for a zoomed out version of the whole file markdown-preview-plus for previewing markdown files file-icons for colorful and distinctive icons that make it easy to recognize file types atomic-emacs for emacs keybindings latex for compiling LaTeX documents pdf-view for viewing PDFs (not performant; based on PDF.js) platformio-ide-terminal for an in-Atom shell emulator General To customize package options: cmd-, to open Settings select “Packages” search for desired package click “Settings” make desired change (applied immediately) note that changes are saved in ~/.atom/config.cson To define custom editor functions: Put the code in init.coffee (Menu: Atom > Init Script…) coffeescript atom.commands.add 'atom-text-editor', 'latex:toggle-bold', -> return unless editor = atom.workspace.getActiveTextEditor() selection = editor.getLastSelection() selection.insertText(\\\\textbf{#{selection.getText()}}) if not editor.getSelectedText() editor.moveLeft() Put a suitable listing in keymap.cson (Menu: Atom > Keymap…) coffeescript atom-text-editor[data-grammar='markdown']: 'cmd-i': 'pug-text-indent' To troubleshoot issues: Include statements like console.log(hey) at relevant points in the code Open the console with ctrl-alt-i Open the keybinding resolver with cmd-. Keyboard shortcuts Search Search: cmd-F Search in project shift-cmd-F Use selection for find: cmd-E Replace one instance: cmd-opt-E Replace all: cmd-return Snippets: Make new snippets: Atom > Snippets Find available snippets: Atom > Package > Snippets Navigation File finder: cmd-P Show hidden files (in file finder): cmd-shift-. Toggle sidebar: cmd-\\ Open Terminal in current directory: ctrl-shift-t Indent selection: cmd+[ Outdent selection: cmd+] LaTeX Build LaTeX file: cmd-opt-b SyncTeX: cmd-opt-s Italicize: cmd-i Bold: cmd-b Beautify: fn-shift-F6 Git Press the Git button in the bottom right corner Select files to review changes Press return with a file selected to stage it Enter a commit message and press commit","tags":"","url":"notes/atom.html"},
{"title":"Math Authoring Environments","text":"Math Authoring Environments There are various considerations in play when choosing an environment to produce an extensive math work in. Here’s my summary of the available options and their relative strenths and weaknesses. Manim Manim is the software used by Grant Sanderson to produce his 3Blue1Brown videos. It’s pretty clearly the best sofware available for producing math visualization animations. There is a sequence of tutorials on manim available on the YouTube channel Theorem of Beethoven. I have some local modifications on my fork of the project on GitHub, including one to use a different font for the text objects. Mathigon Mathigon is a website created by Philipp Legner for interactive math textbooks. Courses are authored in a simple Markdown format, and they can include interactive elements, fill-in-the-blank and short-answer questions, code snippets and executable code blocks (powered by Binder). Data Gymnasia is a set of data science courses hosted on Mathigon’s site and authored by me and other Brown faculty.","tags":"","url":"notes/authoring.html"},
{"title":"Books to read","text":"Books to read Probability Theory: the logic of science, by E.T. Jaynes","tags":"","url":"notes/bookstoread.html"},
{"title":"Calculist","text":"Calculist I use Calculist, a programmable nested list application, for daily to-do lists. This app can be run from a web server or locally, and I use the local desktop version. The customizations live in the file /Applications/Calculist.app/Contents/Resources/app/default_preferences.txt. ctrl + t. Make current item a category (add children TODO, DONE) ctrl + c. Make current item a task (add children expected, actual, remaining) ctrl + d. Mark current item done. ctrl + y. Collapse all children. ctrl + v. Expand all children. ctrl + p. Navigate to parent. ctrl + n. Navigate down (to next sibling or otherwise to child). ctrl + x. Navigate to expected child. ctrl + u. Navigate to actual child. My preferences file: my preferences keyboard shortcuts ctrl + enter enter command mode alt + = add text \\[=] alt + shift + ; add text \\[:] alt + ; add text \\[:] alt + 0 goto -1 alt + spacebar goto ($parent) ctrl + p goto ($parent) ctrl + n down ctrl + spacebar toggle collapse ctrl + = zoom in ctrl + - zoom out ctrl + y collapse all ctrl + v expand all ctrl + alt + y collapse items recursively ctrl + shift + d duplicate ctrl + shift + delete delete ctrl + h move down ctrl + y move up ctrl + shift + right indent ctrl + shift + left outdent ctrl + shift + spacebar toggle collapse siblings alt + enter new item ctrl + c template category ctrl + t template task ctrl + m template morning ctrl + d move to bottom move down move to bottom ctrl + i add item  goto -1 ctrl + l goto ( $item(TODO) ) ctrl + x goto ( $item(expected) ) ctrl + u goto ( $item(actual) ) templates morning Morning Routine [=] util.todo_string($items) TODO [=] util.todo_string($items) Day One [=] util.todo_string($items) expected [:] 8 actual [:] 0 remaining [=] max([0,expected - actual]) Time Logging [=] util.todo_string($items) expected [:] 5 actual [:] 0 remaining [=] max([0,expected - actual]) Habitica [=] util.todo_string($items) expected [:] 3 actual [:] 0 remaining [=] max([0,expected - actual]) Reminder Syncing [=] util.todo_string($items) expected [:] 3 actual [:] 0 remaining [=] max([0,expected - actual]) (Alexa and Apple Reminders) Asana tasks [=] util.todo_string($items) expected [:] 2 actual [:] 0 remaining [=] max([0,expected - actual]) Inbox [=] util.todo_string($items) expected [:] 20 actual [:] 0 remaining [=] max([0,expected - actual]) DONE [=] util.done_string($items) task [=] util.todo_string($items) expected [:] 20 actual [:] 0 remaining [=] max([0,expected - actual]) category [=] util.todo_string_hours($items) TODO [=] util.todo_string($items) DONE [=] util.done_string($items) days of the week Monday Tuesday Wednesday Thursday Friday Saturday Sunday default theme sandcastle default font Ubuntu Mono The first bullet point in the list needs to be util: util is todo: itm | flow(parentOf,parentOf,name,eq(TODO))(itm) is named: itm, nm | flow(name,eq(nm))(itm) is remaining: itm | is_named(itm,remaining) is actual: itm | is_named(itm,actual) todo and remaining: itm | is_todo(itm) && is_remaining(itm) total todo remaining: itm | sum(filter(flatten(itm),todo_and_remaining)) stands for total expected total remaining string: itm | total_todo_remaining(itm) +  minutes left total expected string total remaining: itm | sum(filter(flatten(itm),is_remaining)) total actual: itm | sum(filter(flatten(itm),is_actual)) total actual string: itm | total_actual(itm) +  minutes done jn: , todo string: itm | total_remaining_string(itm) + jn + total_actual_string(itm) done string: itm | total_actual(itm) +  minutes total todo string hours: itm | round(total_todo_remaining(itm)/60,2) +  hours left,  + round(total_actual(itm)/60,2) +  hours done remaining string: itm | total_remaining(itm) +  minutes left done string hours: itm | round(total_actual(itm)/60,2) +  hours done App distribution The app is much nicer if bundled as a macOS app, so you don’t have to do npm start and all that. To do this, download the binary from the appropriate version of Electron, and then follow the instructions here for changing the branding. Basically, this boils down to putting the Calculist directory in Contents/Resources/app and changing some entries in some plist files. Note that the icon files are already there as icon.icns.","tags":"","url":"notes/calculist.html"},
{"title":"CCV","text":"CCV TensorFlow ssh into the CCV server: ssh swatson2@ssh3.ccv.brown.edu Get Anaconda running with the tf2 virtual environment module load anaconda/3-5.2.0 source activate /gpfs/data/data2040/tf2 Request a Jupyter session sbatch ~/jupyter_connect.sh Open KerasJob.out to get the ssh command for connecting (the second one) as well as the URL (at the bottom). Run the ssh command from a new terminal window, and then navigate to the URL. Open a browser to the URL from the previous step, and enter your Jupyter password. Julia The supercomputing cluster at Brown is called CCV. ssh into the CCV server: ssh swatson2@ssh3.ccv.brown.edu Start an interactive Julia session: interact module load julia julia Run a job: Put your files in ~/Dropbox/CCV and test them. Make a job script, say juliajob.sh #!/bin/bash #SBATCH -n 1 #SBATCH -t 1:00:00 #SBATCH --mem=16G julia myfile.jl Upload everything to the server: rsync -av . swatson2@ssh3.ccv.brown.edu:/users/swatson2/julia ssh into the server and start the job sbatch julia/juliajob.sh Check on your job: Run sacct to get jobs started since midnight, and sacct -S 2018-12-01 for jobs started on earlier dates.","tags":"","url":"notes/ccv.html"},
{"title":"Colab","text":"Colab gcloud beta compute --project=sambot-nlg instances create colab-backend --zone=us-east1-b --machine-type=n1-standard-8 --subnet=default --network-tier=PREMIUM --metadata=install-nvidia-driver=True --maintenance-policy=TERMINATE --service-account=792362841879-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --accelerator=type=nvidia-tesla-p100,count=1 --tags=http-server,https-server --image=c2-deeplearning-pytorch-1-4-cu101-20200226 --image-project=ml-images --boot-disk-size=50GB --boot-disk-type=pd-standard --boot-disk-device-name=colab-backend --reservation-affinity=any gcloud compute --project=sambot-nlg firewall-rules create default-allow-http --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server gcloud compute --project=sambot-nlg firewall-rules create default-allow-https --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:443 --source-ranges=0.0.0.0/0 --target-tags=https-server","tags":"","url":"notes/colab.html"},
{"title":"Ebooks","text":"Ebooks I have a Kobo Aura One, and because Kindle books aren’t compatible with this device, I have to strip the DRM from them. I do not use these books for any illegitimate purpose. Kindle To strip the DRM from a Kindle book: The book will be stored somewhere like Users/sswatson/Library/Containers/com.amazon.Kindle/Data/Library/Application Support/Kindle/My Kindle Content/bookname.azw. You can find the exact location from the Preferences dialogue within the app. Copy the book from there to the Desktop. Note that you have to be using an old version of the Kindle software, since the newer versions use a storage format that isn’t conducive to the ApprenticeAlf methods. Open the app DeDRM and select that ebook Note: This process is automated in the script ~/.dedrm.sh. This script works specifically for the most recent book added to the Kindle Library. Kobo (Same idea for Google Play, or any other platform that uses Adobe’s DRM) Log into kobo.com and select “My Library” from the pulldown in the top right Click the ellipsis for the corresponding book and select Download. This downloads the .acsm file (which just contains the metadata for Adobe Digital Editinos to perform the actual download) Double click the .acsm file from ~/Downloads/. This will open Adobe Digital Editions and download the book in epub format. Note that if you have upgraded your computer, you will have to de-authorize and re-authorize ADE on the new machine. Find the epub in ~/Documents/Digital Editions/ and drag to DeDRM","tags":"","url":"notes/ebooks.html"},
{"title":"Emacs","text":"Emacs My emacs setup is highly configured. I use a macOS version of emacs called Aquamacs, and my customizations are available in /Users/sswatson/Library/Preferences/Aquamacs\\ Emacs/Preferences.el AucTeX AucTeX commands C-c C-o C-b. Apply folding C-c C-f C-b. Bold text C-x [tab]. Shift highlighted text left or right (useful for code blocks) C-M-a. Move point to beginning of current environment C-M-e. Move point to end of current environment Custom commands in LaTeX mode C-c e. Extensify delimiters C-c c. Convert a/(b+c) to \\frac{a}{b+c} C-c f. Fraction insert (query num and denom) C-c s. Sequence insert (query template, start, end, separator; e.g., X_#, 1, 10, ,) C-c n. Complete calculation (simplify expression between point and equals sign and insert result) C-c u. Insert superscript C-c j. Insert subscript C-c a. Switch equation to align environment C-c w. Insert \\left. before and \\right|_{} after highlighted region C-c h. Fill line with hyphens M-x commify. Insert commas into number at point; e.g., 12345 to 12{,}345 C-c r. List comprehension: highlight k^2 for k in 1 2 3 join + from beginning to end and do C-c r to convert to 1^2 + 2^2 + 3^2 Multiple minor modes The mmm-mode package is useful when editing code inside a larger document (e.g., a block of Julia code in a TeX file). The parsing is broken, so you need to apply the given minor mode to a block manually. Make sure that the begin-environment closing curly brace is immediately followed by a newline character. C-c % C-c. Apply a particular minor mode to the current block The possible modes are: julia-latex julia-block-latex python-latex python-block-latex r-block-latex asy-latex Markdown C-c C-c p. Preview markdown. C-c C-j. New list item. C-c C-x C-m. Toggle markup hiding. C-c <. Indent region. C-c C-x C-e. Enable MathJax (single dollar sign delimiters) C-c C-c n. Re-number list Markdown preview opens a temporary HTML file which uses the style sheet ~/.pandoc/pandoc.css. This is configured in customizations.el via (setq markdown-css-paths '(/Users/sswatson/.pandoc/pandoc.css)) Asymptote asy-mode commands C-c C-c. Compile and preview. Custom commands C-c l. Insert for loop. Queries variable name, starting index, and terminating index. C-c s. Insert segment. Queries a, b, c, d and inserts (a,b)--(c,d). M-x insert-asy-header. Insert beginning-of-file boilerplate Asymptote code. Jupyter notebooks Run ein:jupyter-server-start to get started Run ein:jupyter-server-stop when you’re done C-c C-c. Execute current cell. M-RET. Execute current cell and open new one. C-c C-T. Toggle cell mode (code/markdown/raw)","tags":"","url":"notes/emacs.html"},
{"title":"Git","text":"Git Instructions for making a pull request on a Julia package Basic workflow: From the Julia package prompt, do dev Example Navigate to ~/.julia/dev/Example/ in the Terminal. Fork the project on GitHub Change origin to be your personal fork of the project: git remote set-url origin https://github.com/sswatson/Example.jl.git Make a new branch with your changes: git checkout -b mybranchname Make the desired changes to the source files. git add the changed files git commit -m commit message git push origin mybranchname to push the changes to the GitHub fork Go to github.com/sswatson/Example.jl and a “Compare & Pull Request” button will appear. Tidying You can push further commits to the same branch, and they will automatically show up on your PR. If you make multiple commits in sequence, you might want to squash them. Do git log --oneline to see the commits, and choose a commit to rebase to. Then git rebase -i commit_id Multiple branches If you have multiple independent changes to make, they should be separated into multiple PRs. Since PRs are linked to a branch, this means that you will need multiple branches. Add an upstream remote; do git remote add upstream https://github.com/JuliaLang/Example.jl.git Make a new branch, named in a way that makes it easy to recognize which change it corresponds to: git checkout -b mybranchname upstream_master_id, where upstream_master_id is the commit id of the head of the upstream master branch that you forked. You can find this with git log --oneline Make appropriate changes in that branch, then push to GitHub as above, then PR from github.com/sswatson/Example.jl. Overview working directory -> staging area -> local repo -> remote repo -> upstream repo git init. Initialize git repo in current directory git add <file>. Put working-directory file in staging area. git commit -m <commit message>. Commit staging area to local repo. git branch <branchname>. Create a new branch. git checkout <branchname>. Switch to branch. HEAD. A reference to the last commit in the currently check-out branch. git log --graph. See a graph layout of the branch history. git rebase master. Run from a different branch. git rebase -i HEAD~3. Squash last 3 commits (change pick to squash in editor) git config --global core.editor emacs. Change editor to emacs. git push -u origin master. Push to remote repo. git pull. Fetch from remote repo and merge. Updating documentation on GitHub In the directory, say .julia/v0.6/AsyPlots/, run git checkout gh-pages to switch to the documentation branch. Then add/commit/whatever, and do git push -u origin gh-pages to push to the documentation branch. Then switch back with git checkout master if desired.","tags":"","url":"notes/git.html"},
{"title":"Gmail through Python","text":"Gmail through Python You can send emails programmatically from Python, though the setup isn’t trivial to figure out. Install yagmail (yet another Gmail client) for a super simple interface. Add the changes in the sswatson/yagmail fork on GitHub if you want to be able to specify a useralias (which is what appears in the “from” line when the receipient reads the message). If you have two-factor authentication on, use an app password. Obtain one via accounts.google.com > Security > App passwords. To register the password in the system keychain: import yagmail yagmail.register(youremailaddress@gmail.com,copy_paste_app_pw_here) Now you can send a message like import yagmail yag = yagmail.SMTP(youremailaddress@gmail.com, useralias = Your Name) yag.send(to=toaddress@example.com, subject=My favorite socks, contents=[The message]) You can access this system through Julia as well, using PyCall: using PyCall yag = pyimport(yagmail) yag.SMTP(youremailaddress@gmail.com, useralias = Your Name).send(contents=[Message]) Here’s an example with a csv file storing the names and email addresses: Contents of summer-registration.csv: Name,Email Sam,sswatson@brown.edu import pandas as pd df = pd.read_csv(summer-registration.csv) df import yagmail yag = yagmail.SMTP(samuel_watson@brown.edu, useralias = Samuel S. Watson) def contents(row): return f Dear {row.Name}, According to my records, you will be registering for the capstone course (DATA 2050) this summer. Unless I hear from you otherwise, I will be sending your information to the Registrar later today. (I sent an override code previously; that was a mistake. I didn't know I have to send the information directly to the Registrar myself.) Best, Sam  for row in df.itertuples(): yag.send(to=row.Email, subject = Registering for DATA 2050, contents = contents(row))","tags":"","url":"notes/gmail.html"},
{"title":"Making a video","text":"Making a video Example code to make a video with ffmpeg. Note that you will need to make sure your frames have even dimensions. ffmpeg -r 4 -i tmp%03d.png -pix_fmt yuv420p output.mp4 Converting a pdf to a png with a width of w pixels pdftoppm -png -scale-to-x w -scale-to-y -1 -singlefile name_of_pdf_file basename_of_output_file Embedding a video on a website <p> <video width=100% controls> <source src=filename.mp4 type=video/mp4> <source src=filename.ogg type=video/ogg> Your browser does not support the video tag. </video> </p>","tags":"","url":"notes/images.html"},
{"title":"Notes","text":"Notes This is where I write down tips and instructions for how to do things that I’m sure I’ll forget by the time I have to do them again. Computing Editing and publishing LaTeX Websites Emacs Video and image manipulation Authoring Environments Programming Julia Python R Unix Git Jupyter notebooks CCV Gmail Airtable Other macOS Ebooks Home Air conditioners Printers Learning Books to read","tags":"","url":"notes/index.html"},
{"title":"Julia","text":"Julia Julia Tips The Julia Express is a great tutorial. apropos(apropos) # search documentation for apropos string @less max(1,2) # show the definition of max function when invoked with arguments 1 and 2 whos() # list of global variables and their types clipboard([1,2]) # copy data to system clipboard clipboard() # copy data from system clipboard, as string workspace() # create new Main module fieldnames(typeof(1:2)) # get field names of a type isdefined(:x) # if variable x is defined (:x is a symbol) findin(['a','c'],['a','b','c','d']) # Return indices of elements that appear in second argument My Julia packages Polished AsyPlots.jl PlanarMaps.jl FractionalGaussianFields.jl WoodedTriangulations.jl Julia package instructions To make a new Julia package, do using PkgDev PkgDev.generate(MyPackageName,MIT) and put your code into ~/.julia/v0.6/MyPackageName/src/MyPackageName.jl To publish the package: Go to github.com and manually add a new repository cd .julia/v0.6/PkgName/ git commit filenames git push -u origin master Notes on other Julia packages SymPy Plots Some favorite Julia packages OffsetArrays. Fortran-style arbitrarily indexed arrays SymPy. Symbolic computation in Julia OhMyREPL. Syntax highlighting for the REPL Feather. Fast and cross-language storage of dataframes. JuMP. Interface to a wide variety of optimization libraries. ProgressMeter. What it says on the tin. PyCall. Interface to Python RCall. Interface to R Dates. Datetimes support. Unitful. Support for number-like objects with units Weave. Literate Julia. StaticArrays. Fixed-length arrays (for performance) Roots. Computing zeros of functions Revise. Pull updates live while editing a package DataFramesMeta. Powerful dataframe manipulation Python. A Python REPL within Julia Debugger. A debugger built on JuliaInterpreter","tags":"","url":"notes/julia.html"},
{"title":"Jupyter Notebooks","text":"Jupyter Notebooks Jupyter from the dock Launching Jupyter notebook from the command line can be a little unnatural and slow, so here are some instructions for attaching a Jupyter Notebook icon to the dock that launches a session directly. Open the app Automator and make a new action. Select ‘run shell script’ and insert these lines: source /Users/sswatson/.bash_profile PATH=$PATH:/Library/TeX/texbin:/usr/local/bin cd /Users/sswatson/Dropbox/Jupyter /Users/sswatson/anaconda/bin/jupyter notebook $1 &>/dev/null & Save the resulting action as an application (Edit -> Save as... -> Application) Save the icon in /Applications/, navigate to it, and do “get info” (command+i) Drag an Jupyter logo into the image section to change the app icon Note that the log will have to be in icns format, which will require you to use an online converter if you have a png or jpeg file. Furthermore, the converter might not work unless the original image is square with dimensions 2^n \\times 2^n for some integer n. Put in on the dock! You can also set this application to directly open .ipynb files. Just identify such a file on your machine, right click and select “Get Info”. Click “Open with”, then “Other”, and select “Jupyter Notebook.” Finally, click “Change all…”. Other kernels To install the sage kernel, copy the kernelspec at a directory like /Applications/SageMath-7.3.app/Contents/Resources/sage/local/share/jupyter/kernels/sagemath/ to the directory ~/Library/Jupyter/kernels Using screen Do screen -S jupyter to start a new screen session. Navigate to ~/Dropbox/Jupyter/Studio Do jupyter lab ctrl-a d to exit the screen session Do screen -ls to see sessions Do screen -r jupyter to re-attach. Jupyter Unicode fonts Jupyter’s nbconvert doesn’t do Unicode fonts correctly. To fix this, we use a custom LaTeX template. Check the locations where your system expect templates to be installed: from jupyter_core.paths import jupyter_path jupyter_path('nbconvert','templates') Copy the default jupyter template (some place like ~/anaconda3/lib/python3.7/site-packages/nbconvert/templates/latex, also available at the jupyter/nbconvert GitHub repo under templates) to one of those folders, and insert the lines \\usepackage[no-math]{fontspec} \\usepackage{mathpazo} \\setmainfont{TeX Gyre Pagella} \\setmonofont{Cavalcade Mono} # Liberation Mono, on Ubuntu 3. Make an example Jupyter notebook and do `jupyter nbconvert --to pdf --template=unicode-fixed.tplx example.ipynb` to double check that it works. 4. Change the default behavior from the notebook by adding these lines `~/.jupyter/jupyter_notebook_config.py` and `~/.jupyter/jupyter_nbconvert_config.py`:python c.LatexExporter.template_file = ‘unicode-fixed’ c.PDFExporter.template_file = ‘unicode-fixed’ c.PDFExporter.latex_command = [‘lualatex’, ’{filename}’] The third line is optional if you have TeX Gyre Pagella available as a system font. Which you can do, by the way, by downloading them directly: wget http://mirrors.ctan.org/fonts/tex-gyre/opentype/texgyrepagella-bold.otf wget http://mirrors.ctan.org/fonts/tex-gyre/opentype/texgyrepagella-bolditalic.otf wget http://mirrors.ctan.org/fonts/tex-gyre/opentype/texgyrepagella-italic.otf wget http://mirrors.ctan.org/fonts/tex-gyre/opentype/texgyrepagella-regular.otf ```","tags":"","url":"notes/jupyter.html"},
{"title":"LaTeX","text":"LaTeX Tools Class files I use a variety of custom LaTeX class files. watsonbook.cls: a book class in the style of MultivariableCalculus.tex syllabus.cls: a syllabus in the style of my Math 0350 syllabus worksheet.cls: for making math worksheets like this one, complete with solution boxes, final answer boxes, and toggleable solutions. watsonslides.cls: Beamer slides in the style of my presentations giambattista.sty: Palatino fonts with Utopia Greeks and Computer Modern blackboard bold PythonTeX Some of the classes listed above use PythonTeX, which allows Python or Julia to be woven into the LaTeX source. Here are some pointers for getting this system working with Julia. An updated installation of TeX, with PythonTeX updated using the TeX Live Package Utility A working installation of Julia mmm-mode for literate program editing in emacs (do M-x package-list within an emacs session) The worksheet.cls class file in /Users/sswatson/Library/texmf/tex/latex (use kpsewhich -var-value=TEXMFHOME to find) A symlink for pythontex3 to some directory like /usr/local/texlive/2016/texmf-dist/scripts/pythontex/pythontex3.py, so that this executable can be found on the path The following lines added to ~/.latexmkrc add_cus_dep(pytxcode, tex, 0, pythontex3); sub pythontex3 {return system(pythontex3 '$_[0]');} Then you can put something like \\jltex{rand(10,10)} directly into a LaTeX document, run latexmk on it, and get a random 10 \\times 10 array inserted into your document. Tricks Adding \\listfiles to your document will print package version information in the .log file. You can add -shell-escape or another pdflatex option to your AucTeX compilation process by modifying the variable TeX-command-extra-options. To customize this variable, Do C-h v, type in the variable name, and click “customize”. Custon fonts If you’re using LuaTeX or XeTeX, you can edit the underlying OpenType font with the free FontForge software. Launch FontForge and File > Open > font-in-question.ttf Navigate to a glyph by doing ctrl+shift+> and typing in the unicode identifier (e.g., U+2112) Adjust the glyph as necessary. Don’t forget to add anchors for continuing characters like accents. You can copy glyphs from other fonts by opening both fonts and doing ctrl-C command-V from the main font view (not from the glyph window) You can add codepoints with Encoding > Add encoding slots Change font info under Element > Font Info Make holes in characters by defining the inner curves so that they go counterclockwise. Do Element > Add extrema before saving a glyph. Do File > Generate Fonts and save as OpenType (CCF). Double click the .otf file to launch FontBook and add the font to your system. Now you can load the font in TeX using \\setmainfont{Your Font Name} with the fontspec package.","tags":"","url":"notes/latex.html"},
{"title":"macOS","text":"macOS File locations Text substitutions are stored in a SQLite database in ~/Library/Dictionaries/CoreDataUbiquitySupport/ in UserDictionary.db (a couple more subdirectories deep in a folder called store) Setting up a new Mac laptop Change hot corners (Desktop & screen saver) and tap-to-click (Trackpad) in System Preferences (top left: show Desktop, top right: application windows, bottom right: put display to sleep) Change option and command key for external keyboard in System Preferences. Add System Preferences > Security & Privacy > Privacy > Full Disk Access (for Terminal) Activate “one tap to click” under Trackpad. Change Mission Control Preference “when switching to an application, switch to space with open windows for the application” Change time settings to 24-hour and display with seconds (Date & Time) Install latest version of Julia Install Dropbox Copy ~/.julia/environments/v1.1/Project.toml from ~/Dropbox/Utilities/julia/v1.1/Project.toml Copy ~/.julia/dev/ from ~/Dropbox/Utilities/julia/deva do ]up from a Julia session Install anaconda3 Set up ssh keys for logging into GitHub and into Brown Math (these are in ~/.ssh/). Do chmod 600 ~/.ssh/id_rsa on the new machine to get the permissions right. Install Google’s Backup & Sync for Google Drive syncing Download Skim Download TinyTeX Install App Store purchases (the ones worth keeping) Install Xcode and download command line tools by going to Xcode menu > Preferences > Downloads Turn off notifications for Game Center, Dropbox Move contents of ~/Dropbox/Utilities/asy to ~/.asy/ Move Dropbox/Utilities/latex/latexmkrc to ~/.latexmkrc Move Dropbox/Utilites/bash/bash_profile to ~/.bash_profile Copy ~/Library/texmf/tex/latex/ from ~/Dropbox/Utilities/latex Change Skim “PDF > Use Current View Settings as Default” to get rid of boundaries Download and authorize Mathematica (software.brown.edu) Download and authorize Microsoft Office (software.brown.edu) Download and authorize Adobe Digital Editions for Kobo and Google Play books Change default application for TeX files to Aquamacs Install fonts from ~/Dropbox/Miscellaneous/Fonts Download: VSCode Asymptote Bookmarks Edit csv Julia Python R Markdown Julia Unicode LaTeX LaTeX Workshop Indent one space In ~/Library/Application\\ Support/Code/User/settings.json put { workbench.startupEditor: newUntitledFile, julia.enableTelemetry: true, python.pythonPath: /Users/sswatson/anaconda3/bin/python, python.linting.enabled: true, editor.wordWrap: bounded, window.zoomLevel: 0, python.dataScience.sendSelectionToInteractiveWindow: true } Atom install packages Atom Beautify Browser Plus Compare Files File Icons Hydrogen Julia LaTeX Minimap PDF View PlatformIO-IDE-Terminal Tablr Uber Juno copy ~/.atom/{styles.less,snippets.cson,keymap.cson,config.cson} from previous machine Station (and transfer) calibre (direct Library to ~/Dropbox/Miscellaneous/Calibre\\ Library) Day One Calculist Desktop copy ~/Applications/calculist-desktop/default_preferences.txt from previous machine Fluid itsycal FontForge Inkscape The old version of Kindle (copy from previous machine) Browsers Chrome Firefox Opera Mathpix snipping tool Adobe Acrobat Spotify R RStudio SageMath Racket Kobo Reader Meld Keyboard Maestro Skype Zoom nteract GIMP Workspaces Paprika Copy ~/Library/Application\\ Support/Keyboard\\ Maestro/* for Keyboard Maestro shortcuts Install aws command line tools and authorize using code online Install Julia and R Jupyter kernels Download and install ffmpeg for manipulating videos (requires downloading pkg-config first) Install Python packages cookiecutter pdfrw rpy2 yagmail (and setup) feather-format plotly plotly-orca pytorch pyperclip pytest bs4 pip install git+https://github.com/sswatson/asana-view pip install git+https://github.com/sswatson/voyager-launch Install R packages tidyverse esquisse shiny knitr caret leaflet Copy over text shortcuts from System Preferences Modify Julia file in pythontex to work with newest Julia version: Array(String, 0) should be Array{{AbstractString}}(0) in usr/local/texlive/2017/texmf-dist/scripts/pythontex Modify pygment’s Julia lexer to highlight functions: add the line (r'([a-zA-Z][a-zA-Z0-9\\._]*)(\\()', bygroups(Name.Function,Text)), to the tokens[‘root’] list in julia.py in the directory ~/anaconda3/lib/python3.6/site-packages/pygments/lexers/) Download the newest verion of asymptote. Put the executable at /usr/local/bin/asy so that it is picked up instead of the texbin asy executable Install MacPorts and use it to download asy and ghostscript. Add printers (the ones at home and the one at 164 Angell St) Set Finder default window to open to (Finder > Preferences) Recovering lost Day One entries Go to Day One > Preferences > Support > Show Backups Navigate to the appropriate DayOne.sqlite file Open in Table Plus (the default application) Select the ZENTRY table Export the ZMARKDOWN field (and possibly ZCREATIONDATE) to CSV using File > Export Table… Open the CSV in numbers and search for the relevant text to find the entry","tags":"","url":"notes/macOS.html"},
{"title":"Attractions","text":"Attractions Glen Park (outdoor basketball, community garden): 0.1 miles Holiday Inn Boston Bunker Hill area: 0.5 miles Subaru: 22 minutes, 8.7 miles Airport: 11 minutes, 5.3 miles Target: 0.5 miles Market Basket: 1.1 miles Prospect Hill Park: 0.5 miles Bunker Hill Monument: 1.8 miles MIT: 1.6 miles Symphony Hall: 3.3 miles, 16 minutes on the Orange line (plus 0.5 miles walk) Brooklyn Boulders (indoor rock climbing): 1.4 miles Arboretum: 8.4 miles cycling, 29 minutes on the Orange Line Taza Chocolate: 1 mile Capone Foods: 0.9 miles Assembly Square: 1.6 miles CRLS: 1.7 miles (with detour) Harvard Square: 2.2 miles CTK: 1.6 miles Star Market: 1.1 miles Whole Foods: 1.3 miles Highland Kitchen: 1 mile Middlesex Fells reservation (4.7 miles, 10 minutes on I–93) Acadia National Park: 4 hours, 25 minutes Nelleke’s house: 3 hours, 25 minutes TD Garden: 8 minutes Boston Common: 3.6 miles Back Bay Station: 14 Orange Line minutes (plus walking time) Somerville Community Path (bikeway connecting to Minuteman): 1.6 miles Lexington City Center: 10.4 miles, 66 minutes Roslindale Village: 10.6 miles, 64 minutes Friends Holleys: 1.1 miles Frederick: 1.2 miles Ben: ? miles Meetups Cambridge Innovation Center (Venture Cafe): 1.6 miles Russell field: 3 miles","tags":"","url":"notes/mortonst.html"},
{"title":"Plots.jl","text":"Plots.jl I configure Plots.jl using the following function (which I keep in startup.jl). function texpyplot() @eval using Plots, LaTeXStrings @eval mypalette = PlotThemes.expand_palette(colorant#000000,[ colorant#003366, # MidnightBlue colorant#8b0000, # DarkRed colorant#013220, # DarkGreen colorant#daa520 # GoldenRod ]; lchoices = [57], cchoices = [100]) @eval mygradient = ColorGradient([colorant#003366, # MidnightBlue colorant#20b2aa, # LightSeaGreen colorant#ffff00, # Yellow colorant#ff6347 #Tomato ]) @eval add_theme(:watson, PlotThemes.PlotTheme( #background_color = RGBA(1,1,1,1), # white transparent foreground_color = colorant#000000, fgtext = colorant#000000, fgguide = colorant#000000, fglegend = colorant#000000, grid = false, framestyle = :origin, palette = mypalette, gradient = mygradient.colors, fontfamily = serif, size = (400,300) )) @eval pyplot() @eval theme(:watson) @eval Plots.PyPlot.rc(text, usetex = true) @eval Plots.PyPlot.rc(text.latex, preamble = \\\\usepackage{giambattista}\\\\usepackage{mathmacros}) @eval Plots.PyPlot.rc(font, family = serif) @eval softblue = RGBA(0.92, 0.95, 0.99, 1); @eval softred = RGBA(0.99, 0.92, 0.91, 1); @eval softyellow = RGBA(0.98, 0.98, 0.9, 1); @eval softgreen = RGBA(0.96, 0.995, 0.98, 1); nothing end","tags":"","url":"notes/plots.html"},
{"title":"Printers","text":"Printers","tags":"","url":"notes/printers.html"},
{"title":"Python","text":"Python Tips import sys; sys.executable. Figure out which Python executable is running","tags":"","url":"notes/python.html"},
{"title":"— TABLES —————————————————","text":"— TABLES ————————————————— — Create table ———————————————- CREATE TABLE fruits( name TEXT PRIMARY KEY, weight NUM ); — List all tables ——————————————- .tables — Drop table ———————————————— DROP TABLE fruits; — Getting info about table columns ————————— PRAGMA table_info(fruits); — ENTRIES ————————————————- — Inserting rows —————————————— INSERT INTO FRUITS (name, weight) VALUES (“banana”,6), (“apple”, 3); — Replacing rows ——————————————— REPLACE INTO FRUITS (name, weight) VALUES (“banana”,6), (“apple”, 3); — Add column ———————————————— ALTER TABLE fruits ADD color TEXT; — Add entries ———————————————- UPDATE fruits SET color=yellow WHERE name=banana; — EXPORTING ————————————————— — Exporting to csv ——————————————— .headers on .mode csv .output myfile.csv SELECT * FROM fruits;","tags":"","url":"notes/sqlite.html"},
{"title":"SymPy.jl","text":"SymPy.jl Declaring variables @vars x y z Imposing assumptions on variables h, y = symbols(h, y, real=true) z = symbols(z,complex=true) n = symbols(n,integer=true,nonnegative=true) refine(integrate(cos(2*PI*n*x),x,0,2*PI),Q.integer(n)) Integration, differentiation, substitution f = x^2 integrate(f,x) diff(f,x) subs(f,x=>2) Special symbols IM # imaginary unit in SymPy PI # pi in SymPy oo # infinity in SymPy Convert to Julia object N(PI*IM) Solve equation solve(Eq(x^3,3)) Convert to LaTeX sympy[:latex](expand((x+1)^10)) Indexed SymPy variables A = [sympy[:Indexed](a,i,j) for i=1:n,j=1:n] B = Sym[Sym(x*string(k)) for k=1:20] Differential equations F = SymFunction(F) diffeq = Eq(diff(F(x), x, 2) - 2*diff(F(x)) + F(x), sin(x)) ex = dsolve(diffeq)","tags":"","url":"notes/sympy.html"},
{"title":"Unix","text":"Unix Tips Recursively grep files with a particular extension (e.g., .py.) grep -r --include \\*.py wordtofind . Find and replace text in all files with a particular extension sed -i '' 's/mathpazo\\_modified/giambattista/g' *.tex Directory-wide search and replace grep -rl oldtext . | xargs sed -i 's/oldtext/newtext/g'","tags":"","url":"notes/unix.html"},
{"title":"Websites","text":"Websites Contents Frog Linkchecker Table of contents Amazon Web Services Frog I use Racket Frog to deploy my websites. The basic setup is as follows (look at Dropbox/Sites/brown/ for an example). At the top level director to contain your website project, you should have two directories and a file: frog.rkt _src output_directory_name_here To set this up, you can do raco frog --init in the top level directory, or you can copy the relevant files from Dropbox/Sites/math Make the appropriate changes in the configuration file frog.rkt Store your Markdown or Scribble source files in whatever directory structure you desire in _src Edit page-template.html as appropriate Put any html webpages as well as any css files and image files directly into the output directory Run raco frog -bp to build and preview the website. To push the website (e.g., to the Brown math department), run rsync -anv ./~sswatson/ sswatson@math.brown.edu:/users/sswatson/public_html This can be done automatically for the Brown site using siteup (defined in ~/.bashrc) and for the private wiki using push (also defined in the bash rc file). Linkchecker It’s a good idea to check that the links on the website work. With the Frog preview server running, do linkchecker --check-extern http://localhost:3000/sswatson/ Table of contents I added a feature that auto-generates tables of contents for Markdown pages, since Frog doesn’t support this. This code is written in Julia, and it lives in ~/Dropbox/Utilities/julia/frog/frog.jl. To use it, save your file as myfilename_pre.md, and include the first and last lines of <!--toc--> * [Frog](#frog) * [Linkchecker](#linkchecker) * [Table of contents](#tableofcontents) * [Amazon Web Services](#amazonwebservices) <!--end--> where you want the table of contents to be (the lines between show what will be filled in when myfilename.md is generated for Frog). Then you can process the files by doing frog from your website directory or any subdirectory thereof. This does the Julia pre- and post-processing as well as the raco frog -b (build) call between them. Amazon Web Services Static sites can be hosted on Amazon S3 for very little cost per month (assuming low traffic). The basic steps: Get an AWS account. Visit the S3 console Create a new bucket. Properties Tab > Static website hosting Permissions > Bucket policy > Copy-paste: { Version: 2012-10-17, Statement: [ { Sid: PublicReadForGetBucketObjects, Effect: Allow, Principal: *, Action: s3:GetObject, Resource: arn:aws:s3:::bucket-name/* } ] }(with the name of your bucket in place of bucket-name) Install the command line tools Navigate to the source directory and do aws s3 sync . s3://bucket-name/","tags":"","url":"notes/website.html"},
{"title":"Bike Friday","text":"Bike Friday My Bike Friday tikit is a white, 14.4 kg folding bicycle purchased from Green Gear Cycling in the summer of 2016. It folds very fast (less than 5 seconds). Its specifications are Chainring: 60 tooth Casette: 22 tooth Crank: 170mm IGH: Shimano Alfine 8 (0.53 to 1.62 ratio) Gear inches: 24.3, 29.6, 34.4, 39.2, 46.0, 56.3, 65.3, 74.3 Brompton (6-speed, for comparison): 33 to 100 The tikit is no longer manufactured, as it has been replaced in the Bike Friday line with the pakiT. The pakiT is lighter and less expensive but takes much longer to fold, so I’m glad I bought the tikit while it was still available. Brompton A 12.8 kg tempest blue six-speed folding bicycle. Similar to the tikit but folds more compactly and uses more proprietary parts. More replaceable than the tikit and therefore useful in situations where loss or theft are particular concerns. Pedego Latch I got my belt-drive, folding, electric bicycle at Pedego Boston, a Belmont shop owned by a really nice guy named Mike Hauser. This bike has a range of about 20 miles Strida The Strida is a lightweight, single-speed, A-frame folding bicycle. Civia Bryant My 2012 Civia Bryant is my only non-folding bicycle; it has a belt drive an an 8-speed internal gear hub UScooter The UScooter is a 22-pound electric kick scooter with a range of about 12 miles. Ecoreco M3 The Ecoreco is a 32-pound electric kick scooter with a range of about 8 miles. Xootr The Xootr is a 12-pound, high-end kick scooter","tags":"","url":"products/conveyances.html"},
{"title":"Products","text":"Products I’ve spent a lot of time over the years researching products. Here are some of my favorites, by category. Contents Productivity Web services Leisure apps Tech hardware Programming Bikes and scooters Gear Clothing Accessories Instruments Kitchen Home Sport Personal care Services Productivity Google Inbox. Handling email and reminders in the same place; take advantage of snoozing. Asana. Project management software for organizing larger scale projects into tasks Trello. Similar to Asana, used for projects where per-board permissions control is required. Dynalist. Nested lists of arbitrary depth; great for organizing and storing information with a natural tree structure, like a course outline Habitica. Recording success with daily habits Airtable. Database with a polished user interface, for storing receipts, inventory for renter’s insurance, grocery data, data collected from forms, etc. Day One. Daily journaling BeFocused Pro. Pomodoro system (breaking up work into 25-minute intervals) Google Keep. Quick notes to search later aTimeLogger 2. Time tracking Dropbox. File syncing GoodNotes/GoodReader. Smooth iOS apps for taking notes with the Apple Pencil and reading PDFS Explain Everything. A whiteboard app for iPad with infinite canvas and support for embedding websides, audio, video, and images Calendly. A web service that connects to your Google Calendar and provides a link to allow others to directly book meetings in your schedule. Paprika. Dedicated recipe manager; can scrape webpages for recipes and aggregate ingredient lists TablePlus. GUI for SQLite and other SQL programs zoom.us. Screen-share remote meetings Fluid. Make any web app into a native app, for quick access from the macOS Dock Web services repl.it. A website for hosting snippets of code in various languages, including Julia. Mathpix. A snipping tool the maps images into LaTeX source code Leisure apps Pocket. App and browser extension for compiling articles for later reading. Integrates with Kobo reader. Calibre. Freeware for managing ebooks. Can be used in conjunction with DeDRM to sideload books from Kindle or Google Play platforms to my Kobo Reader. Spotify. Subscription service for music Audible. Audiobooks Quora. Social media in Q&A format Meetup.com. A great way to connect over shared interests (I’ve done ultimate frisbee and Julia meetups) Tech hardware MacBook Pro. iPad Pro 12.9. iPhone 8+. Kobo Aura One. Ereader Programming Julia. Scientific computing, fast and elegant Python. Packages for everything, and most popular data science language LaTeX. Technical typesetting Asymptote. Beautiful 2D and 3D graphics with TeX labels Racket. An offshoot of Scheme, a language designed for making languages Pyret. An instructional language developed at Brown, runs in-browser and has helpful error messages and other pedagogical assets Sage. Unified Python-based framework for open source math software Juptyer. Browser notebook interface for Julia, Python, R, and more SQLite. Local databases Bikes and scooters Bikes and scooters. See here. Ortlieb panniers. These are relatively expensive but tough, robust, and completely waterproof. They’re also easy to clean due to the laminated fabric. ABUS locks. This is the best bike lock money can buy. It’s lightweight yet competitive with the most secure locks on the market. It’s a good idea to get it from Budnitz, because it’s the only place in the US where you can get this lock with a mounting bracket. NiteRider Lights. The bike light market is crowded, but this is the one I settled on for the best-value, high-end light. Worth getting a bright one if you’re going to be riding in poorly lit areas at night, though almost all of the ones in this line are OK (even 550 lumens is probably quite sufficient). Serfas Lights. Serfas makes the best rear lights, because they attach with stretchy silicone straps to almost anything. Cycling Gloves. Don’t just use winter gloves: it’s important to find something designed for bikes because windproofness is important. I use the Pearl iZUMi AmFIB glove. Other gear for staying warm: a neoprene facemask, and over-the-shoes waterproof pants for when it’s rainy and cold (e.g., Patagonia torrentshell). Helmet. The images below are to help adjust the rear-view mirror on my helmet. Gear I organize the stuff I carry on my daily commute in a Patagonia 30L Black Hole backpack and a (Patagonia 8L Atom Sling)[http://www.patagonia.com/product/atom-sling-bag–8-liters/48261.html] I carry a small flash light clipped to my left pants pocket and an InkJoy Mini ST pen clipped to my right pocket. I sometimes carry a small SpyderCo Dragonfly with ZDP steel for opening packages, cutting string, and slicing apples. In my backpack I have a travel organizer for storing a variety of light accesories. I pack overnight either in a 60L Patagonia Black Hole duffel or in a Briggs & Riley carry-on suitcase. (The Briggs & Riley, as they have a lifetime no-questions-asked repair guarantee.) I keep a variety of travel accessories and travel-sized toiletries in a box in my suitcase so I can quickly select what to pack. I also have these items in an AirTable base to facilitate packing. I carry a Hydroflask vacuum insulated stainless steel water, because I can pack it with ice water in the morning and have cold water for the rest of the day. I use an Oxo On-The-Go salad container, because it’s the only one I’ve found that’s genuinely leakproof. I carry in keys in a leather key case so they don’t scratch other items in my bag. Clothing My main clothing suppliers: Club Monaco (pants and shirts) Lululemon (exercise wear) Brooks Brothers (formal) Smartwool (socks) Stance (boxers) Patagonia (outerwear) I like to get MBT shoes, because I have worn cartilege in my left big toe and the rocker soles allow me to pronate without flexing this joint. I wear size 45 EUR, 11.5 US. Accessories Maui Jim sunglasses. Excellent lenses and frames, and second-to-none customer service Bose noise-cancelling headphones. Great for reducing stress from train or plane noise. 180s earmuffs. Comfortable earmuffs that go around the back of your head. I’ve been using them every winter since high school. Instruments We have a Yamaha CLP 545, rosewood electric piano I have had a Taylor acoustic guitar since my mid teens, when I bought it from my brother Tim Kitchen Nutri-ninja blender. Spending a little more on a blender is worth it, because you don’t have a problem with things not really blending. Le Creuset cookware. We have a number of cast-iron Le Cruset items that we really enjoy. They last much longer than non-stick pieces, because there is no non-stick stuff to wear off. Sodastream. Sparkling water on demand. Home Roomba. Having a robot to clean your floors is worth it. Sugru. An adhesive putty that can be fashioned into hard rubber-like material to repair or enhance other objects (e.g., feet for the bamboo cutting board) Sonic Alert Sonic Bomb Alarm Clock. Will wake you up in the morning no matter how heavy you sleep. Sport Bowflex SelectTech dumbbells. Adjustable dumbbells for in-home workouts. Ultra-Star 175 gram ultimate disk. The best frisbee on the market. Personal care Face moisturizer from Origins. A Perfect World, SPF 40. Services We have Bootstrap Compost come by to pick up our scraps every couple weeks for $10 per visit Dollar Shave Club sends me razors and other toiletry items every other month Quip sends me a new battery for my electric toothbrush, a new toothbrush head, and a new tube of toothpaste quarterly","tags":"","url":"products/index.html"}]};